#LETTER	NAME	ENABLED	LANGUAGE	XFMT	JSTYPE	DESCRIPTION
C	compact	no	NONE	yes	s--	compact input line (fixed field, only used in -x option)
E	extras	no	NONE	yes	s--	Extra tag type information
F	input	yes	NONE	yes	s--	input file (fixed field)
K	NONE	no	NONE	yes	s--	Kind of tag as full name
N	name	yes	NONE	yes	s--	tag name (fixed field)
P	pattern	yes	NONE	yes	s--	pattern (fixed field)
R	NONE	no	NONE	yes	s--	Marker (R or D) representing whether tag is definition or reference
S	signature	no	NONE	yes	s--	Signature of routine (e.g. prototype or parameter list)
Z	scope	no	NONE	yes	s--	Include the "scope:" key in scope field (use s) in tags output, scope name in xref output
a	access	no	NONE	yes	s--	Access (or export) of class members
e	end	no	NONE	yes	-i-	end lines of various items
f	file	yes	NONE	yes	--b	File-restricted scoping
i	inherits	no	NONE	yes	s-b	Inheritance information
k	NONE	yes	NONE	yes	s--	Kind of tag as a single letter
l	language	no	NONE	yes	s--	Language of input file containing tag
m	implementation	no	NONE	yes	s--	Implementation information
n	line	no	NONE	yes	-i-	Line number of tag definition
p	scopeKind	no	NONE	yes	s--	Kind of scope as full name
r	role	no	NONE	yes	s--	Role
s	NONE	yes	NONE	yes	s--	Scope of tag definition (`p' can be used for printing its kind)
t	typeref	yes	NONE	yes	s--	Type and name of a variable or typedef
x	xpath	no	NONE	yes	s--	xpath for the tag
z	kind	no	NONE	yes	s--	Include the "kind:" key in kind field (use k or K) in tags output, kind full name in xref output
-	properties	no	C	yes	s--	properties (static, inline, mutable,...)
-	captures	no	C++	yes	s--	lambda capture list
-	name	yes	C++	yes	s--	aliased names
-	properties	no	C++	yes	s--	properties (static, inline, mutable,...)
-	template	no	C++	yes	s--	template parameters
-	properties	no	CUDA	yes	s--	properties (static, inline, mutable,...)
-	assignment	yes	LdScript	yes	s--	how a value is assigned to the symbol
-	decorators	no	Python	yes	s--	decorators on functions and classes
-	home	yes	passwd	yes	s--	home directory
-	shell	yes	passwd	yes	s--	login shell
-	sectionMarker	no	reStructuredText	yes	s--	character used for declaring section
#
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/
#a
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/;"	access:public
#i
Foo	input.java	/^abstract public class Foo extends Bar$/;"	inherits:Bar
x	input.java	/^    public int x;$/
#kz
Foo	input.java	/^abstract public class Foo extends Bar$/;"	kind:c
x	input.java	/^    public int x;$/;"	kind:f
#Kz
Foo	input.java	/^abstract public class Foo extends Bar$/;"	kind:class
x	input.java	/^    public int x;$/;"	kind:field
#k
Foo	input.java	/^abstract public class Foo extends Bar$/;"	c
x	input.java	/^    public int x;$/;"	f
#K
Foo	input.java	/^abstract public class Foo extends Bar$/;"	class
x	input.java	/^    public int x;$/;"	field
#l
Foo	input.java	/^abstract public class Foo extends Bar$/;"	language:Java
x	input.java	/^    public int x;$/;"	language:Java
#m
Foo	input.java	/^abstract public class Foo extends Bar$/;"	implementation:abstract
x	input.java	/^    public int x;$/
#n
Foo	input.java	/^abstract public class Foo extends Bar$/;"	line:1
x	input.java	/^    public int x;$/;"	line:3
#s
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/;"	class:Foo
#sZ
Foo	input.java	/^abstract public class Foo extends Bar$/
x	input.java	/^    public int x;$/;"	scope:class:Foo
#f
X	input.c	/^struct X {$/;"	file:
Y	input.c	/^struct Y {$/;"	file:
i	input.c	/^  int i;$/;"	file:
j	input.c	/^  int j;$/;"	file:
main	input.c	/^int main(void)$/
x	input.c	/^  struct X x;$/;"	file:
#S
X	input.c	/^struct X {$/
Y	input.c	/^struct Y {$/
i	input.c	/^  int i;$/
j	input.c	/^  int j;$/
main	input.c	/^int main(void)$/;"	signature:(void)
x	input.c	/^  struct X x;$/
#t
X	input.c	/^struct X {$/
Y	input.c	/^struct Y {$/
i	input.c	/^  int i;$/;"	typeref:typename:int
j	input.c	/^  int j;$/;"	typeref:typename:int
main	input.c	/^int main(void)$/;"	typeref:typename:int
x	input.c	/^  struct X x;$/;"	typeref:struct:X
#r
x	input.sh	/^source x$/;"	role:loaded
y	input.sh	/^function y()$/
#r
D/
R/loaded
