types_util	input.vhd	/^package types_util is$/;"	package
strlen	input.vhd	/^function strlen(s: in string) return integer;$/;"	prototype
StringToUVector	input.vhd	/^function StringToUVector(inStr: string) return std_ulogic_vector;$/;"	prototype
StringToSVector	input.vhd	/^function StringToSVector(inStr: string) return std_logic_vector;$/;"	prototype
UnsignedToSigned	input.vhd	/^function UnsignedToSigned(inUnsigned: std_ulogic_vector) return std_logic_vector;$/;"	prototype
SignalFromString	input.vhd	/^function SignalFromString(inStr: string; ind : integer ) return std_logic;$/;"	prototype
SymbolToSVector	input.vhd	/^function SymbolToSVector(inStr: string; idx: integer) return std_logic_vector;$/;"	prototype
tost	input.vhd	/^function tost(v:std_logic_vector) return string;$/;"	prototype
tost	input.vhd	/^function tost(v:std_logic) return string;$/;"	prototype
tost	input.vhd	/^function tost(i : integer) return string;$/;"	prototype
print	input.vhd	/^procedure print(s : string);$/;"	prototype
types_util	input.vhd	/^package body types_util is$/;"	package
strlen	input.vhd	/^  function strlen(s: in string) return integer is$/;"	function
SignalFromString	input.vhd	/^  function SignalFromString(inStr: string; ind : integer ) return std_logic is$/;"	function
StringToUVector	input.vhd	/^  function StringToUVector(inStr: string) return std_ulogic_vector is$/;"	function
StringToSVector	input.vhd	/^  function StringToSVector(inStr: string) return std_logic_vector is$/;"	function
SymbolToSVector	input.vhd	/^  function SymbolToSVector(inStr: string; idx: integer) return std_logic_vector is$/;"	function
ss	input.vhd	/^    constant ss: string(1 to inStr'length) := inStr;$/;"	local	function:SymbolToSVector
UnsignedToSigned	input.vhd	/^  function UnsignedToSigned(inUnsigned: std_ulogic_vector) $/;"	function
nibble	input.vhd	/^  subtype nibble is std_logic_vector(3 downto 0);$/;"	subtype
todec	input.vhd	/^  function todec(i:integer) return character is$/;"	function
tohex	input.vhd	/^  function tohex(n:nibble) return character is$/;"	function
tost	input.vhd	/^  function tost(v:std_logic_vector) return string is$/;"	function
vlen	input.vhd	/^    constant vlen : natural := v'length; --'$/;"	local	function:tost
slen	input.vhd	/^    constant slen : natural := (vlen+3)\/4;$/;"	local	function:tost
tost	input.vhd	/^  function tost(v:std_logic) return string is$/;"	function
tost	input.vhd	/^  function tost(i : integer) return string is$/;"	function
print	input.vhd	/^  procedure print(s : string) is$/;"	procedure
